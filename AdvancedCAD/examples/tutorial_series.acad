// AdvancedCAD Tutorial Series
// Learn AdvancedCAD step by step with progressive examples
// Each tutorial builds on previous concepts and introduces new features

//==============================================================================
// TUTORIAL 1: BASIC SHAPES AND POSITIONING
// Learn: Basic primitives, translate, rotate, scale
//==============================================================================

/*
TUTORIAL 1 OBJECTIVES:
- Create basic 3D shapes
- Position objects in 3D space
- Understand coordinate systems
- Apply basic transformations
*/

module tutorial_1_basic_shapes() {
    // Create a cube
    translate([0, 0, 0]) {
        cube([10, 10, 10]);
    }
    
    // Create a sphere next to the cube
    translate([20, 0, 0]) {
        sphere(r = 5);
    }
    
    // Create a cylinder
    translate([40, 0, 0]) {
        cylinder(h = 10, r = 3);
    }
    
    // Create a cone (tapered cylinder)
    translate([60, 0, 0]) {
        cylinder(h = 10, r1 = 5, r2 = 0);
    }
    
    // Demonstrate rotation - rotated cube
    translate([0, 20, 0]) {
        rotate([45, 0, 45]) {
            cube([8, 8, 8]);
        }
    }
    
    // Demonstrate scaling - scaled sphere
    translate([20, 20, 0]) {
        scale([1, 2, 0.5]) {
            sphere(r = 5);
        }
    }
}

//==============================================================================
// TUTORIAL 2: BOOLEAN OPERATIONS (CSG)
// Learn: union, difference, intersection
//==============================================================================

/*
TUTORIAL 2 OBJECTIVES:
- Understand Boolean operations
- Create complex shapes from simple primitives
- Learn about operation order and hierarchy
*/

module tutorial_2_boolean_operations() {
    // Union - combining shapes
    translate([0, 0, 0]) {
        union() {
            cube([15, 15, 5]);
            translate([0, 0, 5]) {
                cylinder(h = 10, r = 6);
            }
        }
    }
    
    // Difference - subtracting shapes
    translate([30, 0, 0]) {
        difference() {
            cube([15, 15, 15]);
            
            // Subtract a sphere from the cube
            translate([7.5, 7.5, 7.5]) {
                sphere(r = 6);
            }
            
            // Subtract some holes
            translate([3, 3, -1]) {
                cylinder(h = 17, r = 1.5);
            }
            translate([12, 12, -1]) {
                cylinder(h = 17, r = 1.5);
            }
        }
    }
    
    // Intersection - keeping only overlapping parts
    translate([60, 0, 0]) {
        intersection() {
            cube([15, 15, 15]);
            
            translate([7.5, 7.5, 7.5]) {
                sphere(r = 10);
            }
        }
    }
    
    // Complex example combining all operations
    translate([90, 0, 0]) {
        difference() {
            // Base union of cube and cylinder
            union() {
                cube([12, 12, 8]);
                translate([6, 6, 8]) {
                    cylinder(h = 6, r = 4);
                }
            }
            
            // Subtract intersection of sphere and cube
            intersection() {
                translate([6, 6, 4]) {
                    sphere(r = 5);
                }
                translate([2, 2, 2]) {
                    cube([8, 8, 8]);
                }
            }
        }
    }
}

//==============================================================================
// TUTORIAL 3: LOOPS AND PATTERNS
// Learn: for loops, arrays, patterns
//==============================================================================

/*
TUTORIAL 3 OBJECTIVES:
- Use for loops to create patterns
- Understand array syntax
- Create circular and linear patterns
- Build complex assemblies
*/

module tutorial_3_loops_and_patterns() {
    // Linear pattern using for loop
    for (i = [0:4]) {
        translate([i * 12, 0, 0]) {
            cylinder(h = 5 + i * 2, r = 2);
        }
    }
    
    // Circular pattern
    translate([0, 30, 0]) {
        for (angle = [0:30:330]) {
            rotate([0, 0, angle]) {
                translate([15, 0, 0]) {
                    cube([3, 3, 8]);
                }
            }
        }
        
        // Center cylinder
        cylinder(h = 8, r = 5);
    }
    
    // Grid pattern
    translate([0, 60, 0]) {
        for (x = [0:3]) {
            for (y = [0:3]) {
                translate([x * 8, y * 8, 0]) {
                    if ((x + y) % 2 == 0) {
                        cube([6, 6, 3]);
                    } else {
                        cylinder(h = 3, r = 3);
                    }
                }
            }
        }
    }
    
    // Spiral pattern
    translate([50, 30, 0]) {
        for (i = [0:20]) {
            angle = i * 18;
            radius = i * 1.5;
            rotate([0, 0, angle]) {
                translate([radius, 0, i * 0.5]) {
                    sphere(r = 1);
                }
            }
        }
    }
}

//==============================================================================
// TUTORIAL 4: VARIABLES AND PARAMETERS
// Learn: Variables, calculations, parametric design
//==============================================================================

/*
TUTORIAL 4 OBJECTIVES:
- Use variables for parametric design
- Perform calculations
- Create reusable, customizable designs
- Understand parameter relationships
*/

// Parameters (these will show up in the parameter panel)
box_width = 40;
box_height = 30;
box_depth = 20;
wall_thickness = 2;
lid_height = 5;
handle_diameter = 8;

module tutorial_4_parametric_box() {
    // Calculate derived dimensions
    inner_width = box_width - 2 * wall_thickness;
    inner_height = box_height - 2 * wall_thickness;
    inner_depth = box_depth - wall_thickness;
    
    // Main box
    difference() {
        // Outer shell
        cube([box_width, box_height, box_depth]);
        
        // Inner cavity
        translate([wall_thickness, wall_thickness, wall_thickness]) {
            cube([inner_width, inner_height, inner_depth + 1]);
        }
    }
    
    // Lid
    translate([0, box_height + 5, 0]) {
        difference() {
            // Lid body
            cube([box_width, box_height, lid_height]);
            
            // Lid recess
            translate([wall_thickness/2, wall_thickness/2, -1]) {
                cube([box_width - wall_thickness, 
                      box_height - wall_thickness, 
                      lid_height - 1]);
            }
        }
        
        // Handle
        translate([box_width/2, box_height/2, lid_height]) {
            difference() {
                cylinder(h = handle_diameter/2, d = handle_diameter);
                translate([0, 0, -1]) {
                    cylinder(h = handle_diameter/2 + 2, d = handle_diameter/3);
                }
            }
        }
    }
    
    // Demonstrate how parameters affect the design
    // Add mounting posts based on box size
    post_spacing = min(inner_width, inner_height) / 3;
    for (x = [1, 2]) {
        for (y = [1, 2]) {
            translate([x * post_spacing + wall_thickness, 
                      y * post_spacing + wall_thickness, 
                      wall_thickness]) {
                cylinder(h = 5, d = 4);
            }
        }
    }
}

//==============================================================================
// TUTORIAL 5: MODULES AND FUNCTIONS
// Learn: Custom modules, reusable components
//==============================================================================

/*
TUTORIAL 5 OBJECTIVES:
- Create custom modules (functions)
- Build component libraries
- Understand module parameters
- Create complex assemblies from modules
*/

// Custom module for creating bolts
module hex_bolt(diameter, length, head_diameter, head_height) {
    // Bolt head (hexagon)
    cylinder(h = head_height, d = head_diameter, $fn = 6);
    
    // Bolt shaft
    translate([0, 0, -length]) {
        cylinder(h = length, d = diameter);
    }
    
    // Thread representation (simplified)
    for (i = [0:2:length-2]) {
        translate([0, 0, -i-2]) {
            difference() {
                cylinder(h = 1, d = diameter + 0.5);
                translate([0, 0, -1]) {
                    cylinder(h = 3, d = diameter - 0.5);
                }
            }
        }
    }
}

// Custom module for nuts
module hex_nut(diameter, thickness, hole_diameter) {
    difference() {
        cylinder(h = thickness, d = diameter, $fn = 6);
        translate([0, 0, -1]) {
            cylinder(h = thickness + 2, d = hole_diameter);
        }
    }
}

// Custom module for washers
module washer(outer_d, inner_d, thickness) {
    difference() {
        cylinder(h = thickness, d = outer_d);
        translate([0, 0, -1]) {
            cylinder(h = thickness + 2, d = inner_d);
        }
    }
}

// Assembly using custom modules
module tutorial_5_bolt_assembly() {
    bolt_d = 6;
    bolt_length = 25;
    
    // Bolt
    translate([0, 0, 0]) {
        hex_bolt(bolt_d, bolt_length, 10, 4);
    }
    
    // Washers
    translate([0, 0, -5]) {
        washer(12, 6.5, 1);
    }
    translate([0, 0, -bolt_length-1]) {
        washer(12, 6.5, 1);
    }
    
    // Nut
    translate([0, 0, -bolt_length-3]) {
        hex_nut(10, 5, 6.5);
    }
    
    // Show multiple assemblies
    for (x = [0, 20, 40]) {
        translate([x, 0, 0]) {
            // Different bolt lengths
            hex_bolt(bolt_d, bolt_length + x/2, 10, 4);
            translate([0, 0, -(bolt_length + x/2)-3]) {
                hex_nut(10, 5, 6.5);
            }
        }
    }
}

//==============================================================================
// TUTORIAL 6: 2D SHAPES AND EXTRUSION
// Learn: 2D primitives, linear_extrude, rotate_extrude
//==============================================================================

/*
TUTORIAL 6 OBJECTIVES:
- Create 2D shapes
- Use linear extrusion
- Use rotational extrusion
- Add twist and scaling to extrusions
*/

module tutorial_6_extrusions() {
    // Basic linear extrusion
    translate([0, 0, 0]) {
        linear_extrude(height = 10) {
            square([15, 10]);
        }
    }
    
    // Linear extrusion with twist
    translate([25, 0, 0]) {
        linear_extrude(height = 20, twist = 90, slices = 20) {
            square([8, 8], center = true);
        }
    }
    
    // Linear extrusion with scale
    translate([50, 0, 0]) {
        linear_extrude(height = 15, scale = 0.5) {
            circle(r = 8);
        }
    }
    
    // Rotational extrusion - bowl
    translate([0, 40, 0]) {
        rotate_extrude() {
            polygon([
                [0, 0], [12, 0], [12, 2], [10, 8], [0, 8]
            ]);
        }
    }
    
    // Partial rotational extrusion - spring clip
    translate([30, 40, 0]) {
        rotate_extrude(angle = 270) {
            translate([8, 0]) {
                square([2, 10]);
            }
        }
    }
    
    // Complex 2D shape extrusion
    translate([60, 40, 0]) {
        linear_extrude(height = 8, twist = 45, slices = 15) {
            difference() {
                circle(r = 10);
                circle(r = 6);
                
                // Cut spokes
                for (angle = [0:60:300]) {
                    rotate([0, 0, angle]) {
                        translate([0, -1, 0]) {
                            square([15, 2]);
                        }
                    }
                }
            }
        }
    }
}

//==============================================================================
// TUTORIAL 7: ADVANCED TRANSFORMATIONS
// Learn: Complex transformations, matrices, mirroring
//==============================================================================

/*
TUTORIAL 7 OBJECTIVES:
- Use mirror operations
- Combine multiple transformations
- Create symmetric objects
- Understand transformation order
*/

module tutorial_7_advanced_transforms() {
    // Basic mirror
    translate([0, 0, 0]) {
        union() {
            cube([10, 5, 8]);
            mirror([1, 0, 0]) {
                cube([10, 5, 8]);
            }
        }
    }
    
    // Mirror across diagonal
    translate([30, 0, 0]) {
        union() {
            cube([8, 8, 5]);
            mirror([1, 1, 0]) {
                cube([8, 8, 5]);
            }
        }
    }
    
    // Complex symmetric object
    translate([60, 0, 0]) {
        union() {
            // Main body
            cylinder(h = 10, r = 8);
            
            // Symmetric features
            for (mirror_x = [0, 1]) {
                mirror([mirror_x, 0, 0]) {
                    // Wing
                    translate([8, 0, 5]) {
                        rotate([0, 45, 0]) {
                            cube([6, 15, 2], center = true);
                        }
                    }
                    
                    // Support strut
                    translate([4, 0, 0]) {
                        rotate([0, 0, 30]) {
                            cube([2, 12, 10]);
                        }
                    }
                }
            }
        }
    }
    
    // Transformation composition example
    translate([0, 40, 0]) {
        for (i = [0:5]) {
            translate([i * 8, 0, 0]) {
                rotate([0, 0, i * 30]) {
                    scale([1, 1, 1 + i * 0.2]) {
                        translate([0, 3, 0]) {
                            cube([2, 2, 5], center = true);
                        }
                    }
                }
            }
        }
    }
}

//==============================================================================
// TUTORIAL 8: CONDITIONAL LOGIC AND COMPLEX ASSEMBLIES
// Learn: if statements, complex conditions, assembly techniques
//==============================================================================

/*
TUTORIAL 8 OBJECTIVES:
- Use conditional statements
- Create configuration-driven designs
- Build complex assemblies
- Understand design alternatives
*/

// Configuration parameters
include_lid = true;
include_handles = false;
add_ventilation = true;
style = "modern"; // "modern" or "classic"

module tutorial_8_conditional_design() {
    base_width = 60;
    base_height = 40;
    base_depth = 25;
    
    // Main enclosure
    difference() {
        // Outer shell - style dependent
        if (style == "modern") {
            // Modern style - rounded corners
            hull() {
                for (x = [3, base_width-3]) {
                    for (y = [3, base_height-3]) {
                        for (z = [3, base_depth-3]) {
                            translate([x, y, z]) {
                                sphere(r = 3);
                            }
                        }
                    }
                }
            }
        } else {
            // Classic style - sharp corners
            cube([base_width, base_height, base_depth]);
        }
        
        // Inner cavity
        translate([3, 3, 3]) {
            cube([base_width-6, base_height-6, base_depth]);
        }
        
        // Conditional ventilation
        if (add_ventilation) {
            for (row = [0:2]) {
                for (col = [0:4]) {
                    translate([col * 8 + 10, -1, row * 6 + 8]) {
                        rotate([-90, 0, 0]) {
                            cylinder(h = 5, d = 3);
                        }
                    }
                }
            }
        }
    }
    
    // Optional lid
    if (include_lid) {
        translate([0, base_height + 10, 0]) {
            difference() {
                cube([base_width, base_height, 4]);
                translate([1.5, 1.5, -1]) {
                    cube([base_width-3, base_height-3, 3]);
                }
            }
            
            // Lid features based on style
            if (style == "modern") {
                // Modern lid - recessed grip
                translate([base_width/2, base_height/2, 4]) {
                    difference() {
                        cylinder(h = 3, r = 8);
                        translate([0, 0, -1]) {
                            cylinder(h = 5, r = 6);
                        }
                    }
                }
            } else {
                // Classic lid - raised knob
                translate([base_width/2, base_height/2, 4]) {
                    cylinder(h = 6, r = 4);
                    translate([0, 0, 6]) {
                        sphere(r = 3);
                    }
                }
            }
        }
    }
    
    // Optional handles
    if (include_handles) {
        for (side = [0, 1]) {
            translate([side == 0 ? -5 : base_width + 5, base_height/2, base_depth/2]) {
                rotate([0, 90, 0]) {
                    difference() {
                        cylinder(h = 8, r = 6);
                        translate([0, 0, -1]) {
                            cylinder(h = 10, r = 4);
                        }
                    }
                }
            }
        }
    }
    
    // Status indicators (always present but vary by configuration)
    led_count = add_ventilation ? 3 : 1;
    for (i = [0:led_count-1]) {
        translate([10 + i * 15, base_height - 8, base_depth + 1]) {
            cylinder(h = 2, r = 2);
        }
    }
}

//==============================================================================
// TUTORIAL 9: PRACTICAL PROJECT - PHONE STAND
// Combines all previous concepts into a real-world project
//==============================================================================

/*
TUTORIAL 9 OBJECTIVES:
- Apply all learned concepts
- Design for real-world use
- Consider manufacturing constraints
- Create a useful object
*/

// Phone stand parameters
phone_width = 75;     // Phone width
phone_thickness = 10; // Phone thickness with case
stand_angle = 70;     // Viewing angle
base_depth = 80;      // Stand stability
base_thickness = 5;   // Base thickness
support_thickness = 8; // Support wall thickness

module tutorial_9_phone_stand() {
    // Calculate dimensions
    back_height = phone_width * sin(stand_angle) + 20;
    support_length = phone_width * cos(stand_angle) + 30;
    
    difference() {
        union() {
            // Base
            cube([base_depth, support_length, base_thickness]);
            
            // Back support
            translate([0, support_length - support_thickness, 0]) {
                cube([base_depth, support_thickness, back_height]);
            }
            
            // Angled phone rest
            translate([0, 0, base_thickness]) {
                rotate([stand_angle - 90, 0, 0]) {
                    cube([base_depth, support_thickness, phone_width + 10]);
                }
            }
            
            // Side supports
            for (side = [0, base_depth - 8]) {
                translate([side, 0, base_thickness]) {
                    hull() {
                        cube([8, 20, 8]);
                        translate([0, support_length - 20, back_height - 20]) {
                            cube([8, 8, 8]);
                        }
                    }
                }
            }
        }
        
        // Phone slot
        slot_width = phone_thickness + 2;
        translate([(base_depth - slot_width) / 2, -1, base_thickness + 5]) {
            rotate([stand_angle - 90, 0, 0]) {
                cube([slot_width, support_thickness + 2, phone_width + 5]);
            }
        }
        
        // Charging cable slot
        translate([(base_depth - 12) / 2, -1, 0]) {
            cube([12, 25, 8]);
        }
        
        // Weight reduction holes in base
        for (x = [15, 35, 55]) {
            for (y = [15, 35, 55]) {
                if (y < support_length - 15) {
                    translate([x, y, -1]) {
                        cylinder(h = base_thickness + 2, r = 6);
                    }
                }
            }
        }
        
        // Grip texture on base bottom
        for (x = [5:5:base_depth-5]) {
            for (y = [5:5:support_length-15]) {
                translate([x, y, -2]) {
                    sphere(r = 1);
                }
            }
        }
    }
}

//==============================================================================
// TUTORIAL 10: ADVANCED PROJECT - DESK ORGANIZER
// Complex multi-part design with advanced features
//==============================================================================

/*
TUTORIAL 10 OBJECTIVES:
- Design complex multi-part assemblies
- Use advanced CSG operations
- Create modular designs
- Apply all concepts in a comprehensive project
*/

// Desk organizer parameters
organizer_width = 200;
organizer_depth = 150;
organizer_height = 40;
divider_thickness = 2;
pen_hole_diameter = 12;
small_compartment_size = 40;

module tutorial_10_desk_organizer() {
    difference() {
        // Main body
        cube([organizer_width, organizer_depth, organizer_height]);
        
        // Main cavity
        translate([divider_thickness, divider_thickness, divider_thickness]) {
            cube([organizer_width - 2*divider_thickness, 
                  organizer_depth - 2*divider_thickness, 
                  organizer_height]);
        }
    }
    
    // Vertical dividers
    for (x_pos = [organizer_width/3, 2*organizer_width/3]) {
        translate([x_pos - divider_thickness/2, 0, divider_thickness]) {
            cube([divider_thickness, organizer_depth, organizer_height - divider_thickness]);
        }
    }
    
    // Horizontal divider
    translate([2*organizer_width/3, organizer_depth/2 - divider_thickness/2, divider_thickness]) {
        cube([organizer_width/3, divider_thickness, organizer_height - divider_thickness]);
    }
    
    // Pen holders in left section
    translate([organizer_width/6, organizer_depth - 30, organizer_height]) {
        difference() {
            cylinder(h = 20, r = 20);
            
            // Individual pen holes
            for (angle = [0:30:330]) {
                rotate([0, 0, angle]) {
                    translate([12, 0, -1]) {
                        cylinder(h = 22, r = pen_hole_diameter/2);
                    }
                }
            }
            
            // Center hole for larger items
            translate([0, 0, -1]) {
                cylinder(h = 22, r = 6);
            }
        }
    }
    
    // Small compartment dividers (middle section)
    mid_section_x = organizer_width/3;
    mid_section_width = organizer_width/3;
    
    // Create 2x2 grid of small compartments
    for (i = [0:1]) {
        for (j = [0:1]) {
            x_pos = mid_section_x + (i + 0.5) * mid_section_width/2;
            y_pos = (j + 0.5) * organizer_depth/2;
            
            if (i == 0) { // Vertical divider
                translate([x_pos - divider_thickness/2, j * organizer_depth/2, divider_thickness]) {
                    cube([divider_thickness, organizer_depth/2, organizer_height - divider_thickness]);
                }
            }
            if (j == 0) { // Horizontal divider
                translate([mid_section_x, y_pos - divider_thickness/2, divider_thickness]) {
                    cube([mid_section_width, divider_thickness, organizer_height - divider_thickness]);
                }
            }
        }
    }
    
    // Cable management slots
    for (slot = [0:2]) {
        translate([2*organizer_width/3 + 10 + slot * 20, -1, organizer_height/2]) {
            rotate([-90, 0, 0]) {
                hull() {
                    cylinder(h = divider_thickness + 2, r = 3);
                    translate([0, -8, 0]) {
                        cylinder(h = divider_thickness + 2, r = 3);
                    }
                }
            }
        }
    }
    
    // Rounded corners for comfort
    for (x = [0, organizer_width]) {
        for (y = [0, organizer_depth]) {
            translate([x, y, -1]) {
                cylinder(h = divider_thickness + 2, r = 4);
            }
        }
    }
}

//==============================================================================
// TUTORIAL SELECTION - Uncomment ONE tutorial to run
//==============================================================================

// BASIC TUTORIALS
// tutorial_1_basic_shapes();
// tutorial_2_boolean_operations();
// tutorial_3_loops_and_patterns();
// tutorial_4_parametric_box();
// tutorial_5_bolt_assembly();
// tutorial_6_extrusions();
// tutorial_7_advanced_transforms();
// tutorial_8_conditional_design();

// PRACTICAL PROJECTS
// tutorial_9_phone_stand();
tutorial_10_desk_organizer();

//==============================================================================
// TUTORIAL COMPLETION CHECKLIST
//==============================================================================

/*
TUTORIAL PROGRESSION CHECKLIST:

□ Tutorial 1: Basic Shapes and Positioning
  - Created basic primitives (cube, sphere, cylinder, cone)
  - Applied translate, rotate, scale transformations
  - Understand 3D coordinate system

□ Tutorial 2: Boolean Operations
  - Used union to combine shapes
  - Used difference to subtract shapes
  - Used intersection to find overlapping parts
  - Combined multiple operations

□ Tutorial 3: Loops and Patterns
  - Created linear patterns with for loops
  - Made circular patterns
  - Built grid patterns
  - Generated spiral patterns

□ Tutorial 4: Variables and Parameters
  - Used variables for parametric design
  - Calculated derived dimensions
  - Created parameter-driven designs
  - Built reusable, customizable objects

□ Tutorial 5: Modules and Functions
  - Created custom modules
  - Used module parameters
  - Built component libraries
  - Assembled complex objects from modules

□ Tutorial 6: 2D Shapes and Extrusion
  - Created 2D shapes (squares, circles, polygons)
  - Used linear_extrude with height
  - Applied twist and scaling to extrusions
  - Used rotate_extrude for revolution

□ Tutorial 7: Advanced Transformations
  - Used mirror operations
  - Combined multiple transformations
  - Created symmetric objects
  - Understood transformation order

□ Tutorial 8: Conditional Logic
  - Used if statements for conditional geometry
  - Created configuration-driven designs
  - Built designs with multiple options
  - Applied logic to assembly decisions

□ Tutorial 9: Phone Stand Project
  - Applied all concepts in practical project
  - Designed for real-world use
  - Considered manufacturing constraints
  - Created functional object

□ Tutorial 10: Desk Organizer Project
  - Built complex multi-part assembly
  - Used advanced CSG operations
  - Created modular design
  - Demonstrated mastery of all concepts

NEXT STEPS:
After completing all tutorials, you should be able to:
- Design complex 3D objects from scratch
- Use parametric design principles
- Create reusable component libraries
- Build practical, functional objects
- Export models for 3D printing or manufacturing

ADDITIONAL PRACTICE:
Try creating these projects on your own:
- Tool holder for your workbench
- Custom electronics enclosure
- Decorative vase or container
- Mechanical parts for a specific application
- Architectural model or component
*/
